"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "OtpInputsRef", {
  enumerable: true,
  get: function get() {
    return _types.OtpInputsRef;
  }
});
exports.default = void 0;

var _clipboard = _interopRequireDefault(require("@react-native-community/clipboard"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _OtpInput = _interopRequireDefault(require("./OtpInput"));

var _types = require("./types");

var _helpers = require("./helpers");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ACTION_TYPES = {
  setHandleChange: 'setHandleChange',
  setOtpTextForIndex: 'setOtpTextForIndex',
  setOtpCode: 'setOtpCode',
  clearOtp: 'clearOtp',
  setHasKeySupport: 'setHasKeySupport'
};

const reducer = (state, {
  type,
  payload
}) => {
  switch (type) {
    case ACTION_TYPES.setOtpTextForIndex:
      {
        const otpCode = _objectSpread(_objectSpread({}, state.otpCode), {}, {
          ["".concat(payload.index)]: payload.text
        });

        state.handleChange(Object.values(otpCode).join(''));
        return _objectSpread(_objectSpread({}, state), {}, {
          otpCode
        });
      }

    case ACTION_TYPES.setOtpCode:
      {
        const otpCode = (0, _helpers.fillOtpCode)(payload.numberOfInputs, payload.code);
        state.handleChange(Object.values(otpCode).join(''));
        return _objectSpread(_objectSpread({}, state), {}, {
          otpCode
        });
      }

    case ACTION_TYPES.clearOtp:
      {
        const otpCode = (0, _helpers.fillOtpCode)(payload);
        state.handleChange(Object.values(otpCode).join(''));
        return _objectSpread(_objectSpread({}, state), {}, {
          otpCode
        });
      }

    case ACTION_TYPES.setHandleChange:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          handleChange: payload
        });
      }

    case ACTION_TYPES.setHasKeySupport:
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          hasKeySupport: payload
        });
      }

    default:
      return state;
  }
};

const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between'
  }
});

const OtpInputs = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  let {
    autofillFromClipboard = true,
    autoCapitalize = 'none',
    clearTextOnFocus = false,
    defaultValue,
    focusStyles,
    handleChange = console.log,
    inputContainerStyles,
    inputStyles,
    isRTL = false,
    keyboardType = 'phone-pad',
    numberOfInputs = 4,
    placeholder = '',
    secureTextEntry = false,
    selectTextOnFocus = true,
    style,
    testIDPrefix = 'otpInput'
  } = _ref,
      restProps = _objectWithoutProperties(_ref, ["autofillFromClipboard", "autoCapitalize", "clearTextOnFocus", "defaultValue", "focusStyles", "handleChange", "inputContainerStyles", "inputStyles", "isRTL", "keyboardType", "numberOfInputs", "placeholder", "secureTextEntry", "selectTextOnFocus", "style", "testIDPrefix"]);

  const previousCopiedText = (0, _react.useRef)('');
  const inputs = (0, _react.useRef)([]);
  const [{
    otpCode,
    hasKeySupport
  }, dispatch] = (0, _react.useReducer)(reducer, {}, () => ({
    otpCode: (0, _helpers.fillOtpCode)(numberOfInputs, defaultValue),
    handleChange,
    hasKeySupport: _reactNative.Platform.OS === 'ios'
  }));
  (0, _react.useEffect)(() => {
    dispatch({
      type: ACTION_TYPES.setHandleChange,
      payload: handleChange
    });
  }, [handleChange]);
  (0, _react.useImperativeHandle)(ref, () => ({
    reset: () => {
      dispatch({
        type: ACTION_TYPES.clearOtp,
        payload: numberOfInputs
      });
      inputs.current.forEach(input => {
        var _input$current;

        return input === null || input === void 0 ? void 0 : (_input$current = input.current) === null || _input$current === void 0 ? void 0 : _input$current.clear();
      });
      previousCopiedText.current = '';

      _clipboard.default.setString('');
    },
    focus: () => {
      var _firstInput$current;

      const firstInput = inputs.current[0];
      firstInput === null || firstInput === void 0 ? void 0 : (_firstInput$current = firstInput.current) === null || _firstInput$current === void 0 ? void 0 : _firstInput$current.focus();
    }
  }), [numberOfInputs]);

  const handleInputTextChange = (text, index) => {
    if (!text.length) {
      handleClearInput(index);
    }

    if (text.length > 1) {
      handleClearInput(index);

      _reactNative.Keyboard.dismiss();

      return fillInputs(text);
    }

    if (text) {
      dispatch({
        type: ACTION_TYPES.setOtpTextForIndex,
        payload: {
          text,
          index
        }
      });
      focusInput(index + 1);
    }

    if (index === numberOfInputs - 1 && text) {
      _reactNative.Keyboard.dismiss();
    }
  };

  const _handleTextChange = (text, index) => {
    if (_reactNative.Platform.OS === 'android' && !hasKeySupport || // Pasted from input accessory
    _reactNative.Platform.OS === 'ios' && text.length > 1) {
      handleInputTextChange(text, index);
    }
  };

  const _handleKeyPress = ({
    nativeEvent: {
      key
    }
  }, index) => {
    handleInputTextChange(key === 'Backspace' ? '' : key, index);
    if (_reactNative.Platform.OS === 'android' && !hasKeySupport && !isNaN(parseInt(key))) dispatch({
      type: ACTION_TYPES.setHasKeySupport,
      payload: true
    });
  };

  const focusInput = (0, _react.useCallback)(index => {
    if (index >= 0 && index < numberOfInputs) {
      var _input$current2;

      const input = inputs.current[index];
      input === null || input === void 0 ? void 0 : (_input$current2 = input.current) === null || _input$current2 === void 0 ? void 0 : _input$current2.focus();
    }
  }, [numberOfInputs]);
  const handleClearInput = (0, _react.useCallback)(inputIndex => {
    var _input$current3;

    const input = inputs.current[inputIndex];
    input === null || input === void 0 ? void 0 : (_input$current3 = input.current) === null || _input$current3 === void 0 ? void 0 : _input$current3.clear();
    dispatch({
      type: ACTION_TYPES.setOtpTextForIndex,
      payload: {
        index: inputIndex,
        text: ''
      }
    });
    focusInput(inputIndex - 1);
  }, [focusInput]);
  const fillInputs = (0, _react.useCallback)(code => {
    dispatch({
      type: ACTION_TYPES.setOtpCode,
      payload: {
        numberOfInputs,
        code
      }
    });
  }, [numberOfInputs]);
  const listenOnCopiedText = (0, _react.useCallback)(async () => {
    const copiedText = await _clipboard.default.getString();
    const otpCodeValue = Object.values(otpCode).join('');

    if (copiedText && copiedText.length === numberOfInputs && copiedText !== otpCodeValue && copiedText !== previousCopiedText.current) {
      previousCopiedText.current = copiedText;
      fillInputs(copiedText);
    }
  }, [fillInputs, numberOfInputs, otpCode]);
  (0, _react.useEffect)(() => {
    let interval;

    if (autofillFromClipboard) {
      interval = setInterval(() => {
        listenOnCopiedText();
      }, 500);
    }

    return () => {
      clearInterval(interval);
    };
  }, [autofillFromClipboard, listenOnCopiedText, numberOfInputs]);

  const renderInputs = () => {
    const iterationArray = Array(numberOfInputs).fill(0);
    return iterationArray.map((_, index) => {
      let inputIndex = index;

      if (isRTL) {
        inputIndex = numberOfInputs - 1 - index;
      }

      const inputValue = otpCode["".concat(inputIndex)];

      if (!inputs.current[inputIndex]) {
        inputs.current[inputIndex] = /*#__PURE__*/_react.default.createRef();
      }

      return /*#__PURE__*/_react.default.createElement(_OtpInput.default, _extends({
        autoCapitalize: autoCapitalize,
        clearTextOnFocus: clearTextOnFocus,
        firstInput: index === 0,
        focusStyles: focusStyles,
        handleKeyPress: keyPressEvent => _handleKeyPress(keyPressEvent, inputIndex),
        handleTextChange: text => _handleTextChange(text, inputIndex),
        inputContainerStyles: inputContainerStyles,
        inputStyles: inputStyles,
        inputValue: inputValue,
        key: inputIndex,
        keyboardType: keyboardType,
        maxLength: _reactNative.Platform.select({
          android: 1,
          ios: index === 0 ? numberOfInputs : 1
        }),
        numberOfInputs: numberOfInputs,
        placeholder: placeholder // @ts-ignore
        ,
        ref: inputs.current[inputIndex],
        secureTextEntry: secureTextEntry,
        selectTextOnFocus: selectTextOnFocus,
        testID: "".concat(testIDPrefix, "-").concat(inputIndex)
      }, restProps));
    });
  };

  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: style || styles.container
  }, renderInputs());
});
var _default = OtpInputs;
exports.default = _default;
//# sourceMappingURL=index.js.map