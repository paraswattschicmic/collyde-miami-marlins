"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const majorVersionIOS = parseInt("".concat(_reactNative.Platform.Version), 10);
const isOTPSupported = _reactNative.Platform.OS === 'ios' && majorVersionIOS >= 12;
const OtpInput = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  let {
    focusStyles,
    handleKeyPress,
    handleTextChange,
    inputContainerStyles,
    inputStyles,
    inputValue,
    placeholder,
    selectTextOnFocus
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["focusStyles", "handleKeyPress", "handleTextChange", "inputContainerStyles", "inputStyles", "inputValue", "placeholder", "selectTextOnFocus"]);

  const [focused, setFocused] = (0, _react.useState)(false);
  (0, _react.useEffect)(() => {
    var _ref2, _ref2$current;

    (_ref2 = ref) === null || _ref2 === void 0 ? void 0 : (_ref2$current = _ref2.current) === null || _ref2$current === void 0 ? void 0 : _ref2$current.setNativeProps({
      value: inputValue,
      text: inputValue
    });
  }, [ref, inputValue]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [inputContainerStyles, focused && focusStyles]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.TextInput, _extends({
    onBlur: () => setFocused(false),
    onChangeText: handleTextChange,
    onFocus: () => setFocused(true),
    onKeyPress: handleKeyPress,
    placeholder: placeholder,
    ref: ref // https://github.com/facebook/react-native/issues/18339
    ,
    selectTextOnFocus: _reactNative.Platform.select({
      ios: selectTextOnFocus,
      android: true
    }),
    style: inputStyles,
    textContentType: isOTPSupported ? 'oneTimeCode' : 'none',
    underlineColorAndroid: "transparent"
  }, rest)));
});

var _default = /*#__PURE__*/_react.default.memo(OtpInput);

exports.default = _default;
//# sourceMappingURL=OtpInput.js.map