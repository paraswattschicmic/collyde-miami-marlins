{"version":3,"sources":["index.tsx"],"names":["ACTION_TYPES","setHandleChange","setOtpTextForIndex","setOtpCode","clearOtp","setHasKeySupport","reducer","state","type","payload","otpCode","index","text","handleChange","Object","values","join","numberOfInputs","code","hasKeySupport","styles","StyleSheet","create","container","flex","flexDirection","alignItems","justifyContent","OtpInputs","ref","autofillFromClipboard","autoCapitalize","clearTextOnFocus","defaultValue","focusStyles","console","log","inputContainerStyles","inputStyles","isRTL","keyboardType","placeholder","secureTextEntry","selectTextOnFocus","style","testIDPrefix","restProps","previousCopiedText","inputs","dispatch","Platform","OS","reset","current","forEach","input","clear","Clipboard","setString","focus","firstInput","handleInputTextChange","length","handleClearInput","Keyboard","dismiss","fillInputs","focusInput","handleTextChange","handleKeyPress","nativeEvent","key","isNaN","parseInt","inputIndex","listenOnCopiedText","copiedText","getString","otpCodeValue","interval","setInterval","clearInterval","renderInputs","iterationArray","Array","fill","map","_","inputValue","React","createRef","keyPressEvent","select","android","ios"],"mappings":"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","sourcesContent":["import Clipboard from '@react-native-community/clipboard';\nimport React, {\n  RefObject,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useReducer,\n  useRef,\n} from 'react';\nimport {\n  Keyboard,\n  NativeSyntheticEvent,\n  Platform,\n  StyleSheet,\n  TextInput,\n  TextInputKeyPressEventData,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport OtpInput from './OtpInput';\nimport { ActionTypes, OtpInputsRef, ReducerState, Actions } from './types';\nimport { fillOtpCode } from './helpers';\n\ntype Props = TextInputProps & {\n  autofillFromClipboard: boolean;\n  keyboardType?:\n    | 'default'\n    | 'email-address'\n    | 'phone-pad'\n    | 'visible-password'\n    | 'ascii-capable'\n    | 'numbers-and-punctuation'\n    | 'url'\n    | 'name-phone-pad'\n    | 'twitter'\n    | 'web-search'\n    | undefined;\n  style?: ViewStyle;\n  focusStyles?: ViewStyle;\n  defaultValue?: string;\n  handleChange: (otpCode: string) => void;\n  inputContainerStyles?: ViewStyle;\n  inputStyles?: TextStyle;\n  isRTL?: boolean;\n  numberOfInputs: number;\n  testIDPrefix?: string;\n};\n\nconst ACTION_TYPES: ActionTypes = {\n  setHandleChange: 'setHandleChange',\n  setOtpTextForIndex: 'setOtpTextForIndex',\n  setOtpCode: 'setOtpCode',\n  clearOtp: 'clearOtp',\n  setHasKeySupport: 'setHasKeySupport',\n};\n\nconst reducer = (state: ReducerState, { type, payload }: Actions) => {\n  switch (type) {\n    case ACTION_TYPES.setOtpTextForIndex: {\n      const otpCode = {\n        ...state.otpCode,\n        [`${payload.index}`]: payload.text,\n      };\n      state.handleChange(Object.values(otpCode).join(''));\n\n      return {\n        ...state,\n        otpCode,\n      };\n    }\n\n    case ACTION_TYPES.setOtpCode: {\n      const otpCode = fillOtpCode(payload.numberOfInputs, payload.code);\n\n      state.handleChange(Object.values(otpCode).join(''));\n\n      return {\n        ...state,\n        otpCode,\n      };\n    }\n\n    case ACTION_TYPES.clearOtp: {\n      const otpCode = fillOtpCode(payload);\n      state.handleChange(Object.values(otpCode).join(''));\n\n      return { ...state, otpCode };\n    }\n\n    case ACTION_TYPES.setHandleChange: {\n      return { ...state, handleChange: payload };\n    }\n\n    case ACTION_TYPES.setHasKeySupport: {\n      return { ...state, hasKeySupport: payload };\n    }\n\n    default:\n      return state;\n  }\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n});\n\nconst OtpInputs = forwardRef<OtpInputsRef, Props>(\n  (\n    {\n      autofillFromClipboard = true,\n      autoCapitalize = 'none',\n      clearTextOnFocus = false,\n      defaultValue,\n      focusStyles,\n      handleChange = console.log,\n      inputContainerStyles,\n      inputStyles,\n      isRTL = false,\n      keyboardType = 'phone-pad',\n      numberOfInputs = 4,\n      placeholder = '',\n      secureTextEntry = false,\n      selectTextOnFocus = true,\n      style,\n      testIDPrefix = 'otpInput',\n      ...restProps\n    },\n    ref,\n  ) => {\n    const previousCopiedText = useRef<string>('');\n    const inputs = useRef<Array<RefObject<TextInput>>>([]);\n    const [{ otpCode, hasKeySupport }, dispatch] = useReducer(\n      reducer,\n      {},\n      () => ({\n        otpCode: fillOtpCode(numberOfInputs, defaultValue),\n        handleChange,\n        hasKeySupport: Platform.OS === 'ios',\n      }),\n    );\n\n    useEffect(() => {\n      dispatch({ type: ACTION_TYPES.setHandleChange, payload: handleChange });\n    }, [handleChange]);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        reset: (): void => {\n          dispatch({ type: ACTION_TYPES.clearOtp, payload: numberOfInputs });\n          inputs.current.forEach((input) => input?.current?.clear());\n          previousCopiedText.current = '';\n          Clipboard.setString('');\n        },\n        focus: (): void => {\n          const firstInput = inputs.current[0];\n          firstInput?.current?.focus();\n        },\n      }),\n      [numberOfInputs],\n    );\n\n    const handleInputTextChange = (text: string, index: number): void => {\n      if (!text.length) {\n        handleClearInput(index);\n      }\n\n      if (text.length > 1) {\n        handleClearInput(index);\n        Keyboard.dismiss();\n        return fillInputs(text);\n      }\n\n      if (text) {\n        dispatch({\n          type: ACTION_TYPES.setOtpTextForIndex,\n          payload: {\n            text,\n            index,\n          },\n        });\n        focusInput(index + 1);\n      }\n\n      if (index === numberOfInputs - 1 && text) {\n        Keyboard.dismiss();\n      }\n    };\n\n    const handleTextChange = (text: string, index: number) => {\n      if (\n        (Platform.OS === 'android' && !hasKeySupport) ||\n        // Pasted from input accessory\n        (Platform.OS === 'ios' && text.length > 1)\n      ) {\n        handleInputTextChange(text, index);\n      }\n    };\n\n    const handleKeyPress = (\n      {\n        nativeEvent: { key },\n      }: NativeSyntheticEvent<TextInputKeyPressEventData>,\n      index: number,\n    ) => {\n      handleInputTextChange(key === 'Backspace' ? '' : key, index);\n\n      if (Platform.OS === 'android' && !hasKeySupport && !isNaN(parseInt(key)))\n        dispatch({ type: ACTION_TYPES.setHasKeySupport, payload: true });\n    };\n\n    const focusInput = useCallback(\n      (index: number): void => {\n        if (index >= 0 && index < numberOfInputs) {\n          const input = inputs.current[index];\n          input?.current?.focus();\n        }\n      },\n      [numberOfInputs],\n    );\n\n    const handleClearInput = useCallback(\n      (inputIndex: number) => {\n        const input = inputs.current[inputIndex];\n        input?.current?.clear();\n        dispatch({\n          type: ACTION_TYPES.setOtpTextForIndex,\n          payload: {\n            index: inputIndex,\n            text: '',\n          },\n        });\n        focusInput(inputIndex - 1);\n      },\n      [focusInput],\n    );\n\n    const fillInputs = useCallback(\n      (code: string) => {\n        dispatch({\n          type: ACTION_TYPES.setOtpCode,\n          payload: { numberOfInputs, code },\n        });\n      },\n      [numberOfInputs],\n    );\n\n    const listenOnCopiedText = useCallback(async (): Promise<void> => {\n      const copiedText = await Clipboard.getString();\n      const otpCodeValue = Object.values(otpCode).join('');\n\n      if (\n        copiedText &&\n        copiedText.length === numberOfInputs &&\n        copiedText !== otpCodeValue &&\n        copiedText !== previousCopiedText.current\n      ) {\n        previousCopiedText.current = copiedText;\n        fillInputs(copiedText);\n      }\n    }, [fillInputs, numberOfInputs, otpCode]);\n\n    useEffect(() => {\n      let interval: NodeJS.Timeout;\n\n      if (autofillFromClipboard) {\n        interval = setInterval(() => {\n          listenOnCopiedText();\n        }, 500);\n      }\n\n      return () => {\n        clearInterval(interval);\n      };\n    }, [autofillFromClipboard, listenOnCopiedText, numberOfInputs]);\n\n    const renderInputs = (): Array<JSX.Element> => {\n      const iterationArray = Array<number>(numberOfInputs).fill(0);\n\n      return iterationArray.map((_, index) => {\n        let inputIndex = index;\n        if (isRTL) {\n          inputIndex = numberOfInputs - 1 - index;\n        }\n        const inputValue = otpCode[`${inputIndex}`];\n\n        if (!inputs.current[inputIndex]) {\n          inputs.current[inputIndex] = React.createRef<TextInput>();\n        }\n\n        return (\n          <OtpInput\n            autoCapitalize={autoCapitalize}\n            clearTextOnFocus={clearTextOnFocus}\n            firstInput={index === 0}\n            focusStyles={focusStyles}\n            handleKeyPress={(\n              keyPressEvent: NativeSyntheticEvent<TextInputKeyPressEventData>,\n            ) => handleKeyPress(keyPressEvent, inputIndex)}\n            handleTextChange={(text: string) =>\n              handleTextChange(text, inputIndex)\n            }\n            inputContainerStyles={inputContainerStyles}\n            inputStyles={inputStyles}\n            inputValue={inputValue}\n            key={inputIndex}\n            keyboardType={keyboardType}\n            maxLength={Platform.select({\n              android: 1,\n              ios: index === 0 ? numberOfInputs : 1,\n            })}\n            numberOfInputs={numberOfInputs}\n            placeholder={placeholder}\n            // @ts-ignore\n            ref={inputs.current[inputIndex]}\n            secureTextEntry={secureTextEntry}\n            selectTextOnFocus={selectTextOnFocus}\n            testID={`${testIDPrefix}-${inputIndex}`}\n            {...restProps}\n          />\n        );\n      });\n    };\n\n    return <View style={style || styles.container}>{renderInputs()}</View>;\n  },\n);\n\nexport { OtpInputsRef };\nexport default OtpInputs;\n"]}