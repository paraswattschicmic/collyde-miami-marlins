function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useEffect, forwardRef } from 'react';
import { Platform, TextInput, View } from 'react-native';
const majorVersionIOS = parseInt("".concat(Platform.Version), 10);
const isOTPSupported = Platform.OS === 'ios' && majorVersionIOS >= 12;
const OtpInput = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    focusStyles,
    handleKeyPress,
    handleTextChange,
    inputContainerStyles,
    inputStyles,
    inputValue,
    placeholder,
    selectTextOnFocus
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["focusStyles", "handleKeyPress", "handleTextChange", "inputContainerStyles", "inputStyles", "inputValue", "placeholder", "selectTextOnFocus"]);

  const [focused, setFocused] = useState(false);
  useEffect(() => {
    var _ref2, _ref2$current;

    (_ref2 = ref) === null || _ref2 === void 0 ? void 0 : (_ref2$current = _ref2.current) === null || _ref2$current === void 0 ? void 0 : _ref2$current.setNativeProps({
      value: inputValue,
      text: inputValue
    });
  }, [ref, inputValue]);
  return /*#__PURE__*/React.createElement(View, {
    style: [inputContainerStyles, focused && focusStyles]
  }, /*#__PURE__*/React.createElement(TextInput, _extends({
    onBlur: () => setFocused(false),
    onChangeText: handleTextChange,
    onFocus: () => setFocused(true),
    onKeyPress: handleKeyPress,
    placeholder: placeholder,
    ref: ref // https://github.com/facebook/react-native/issues/18339
    ,
    selectTextOnFocus: Platform.select({
      ios: selectTextOnFocus,
      android: true
    }),
    style: inputStyles,
    textContentType: isOTPSupported ? 'oneTimeCode' : 'none',
    underlineColorAndroid: "transparent"
  }, rest)));
});
export default /*#__PURE__*/React.memo(OtpInput);
//# sourceMappingURL=OtpInput.js.map